{"version":3,"sources":["Pages/Results/Results.module.css","Pages/AdditionalFees/AdditionalFees.module.css","Pages/Receipt/Receipt.module.css","Pages/AddItems/AddItems.module.css","Pages/ClaimItems/ClaimItems.module.css","Pages/Start/Start.module.css","shared/Item/Item.module.css","Pages/Tax/Tax.module.css","shared/Header/Header.module.css","shared/ProceedDiv/ProceedDiv.module.css","shared/Backdrop/Backdrop.module.css","shared/Modal/Modal.module.css","shared/ProceedDiv/ProceedDiv.js","store/actions.js","assets/start-icon.png","Pages/Start/Start.js","shared/Backdrop/Backdrop.js","shared/Modal/Modal.js","shared/Item/Item.js","Pages/AddItems/AddItems.js","shared/Header/Header.js","hoc/Layout/Layout.js","Pages/ClaimItems/ClaimItems.js","Pages/Tax/Tax.js","Pages/AdditionalFees/AdditionalFees.js","Pages/Results/Results.js","Pages/Receipt/Receipt.js","App.js","shared/utility.js","store/reducer.js","index.js"],"names":["module","exports","proceedDiv","props","className","classes","ProceedDiv","ProceedButton","onClick","clicked","children","ON_START","NEXT_PAGE","ADD_ITEM","REMOVE_ITEM","GO_BACK","CHANGE_NAME","ADD_PERSON","REMOVE_PERSON","CLAIM_ITEM","TAX_ITEM","SELECT_ALL_ITEMS","ON_SPLIT","Start","state","eventName","amountPeople","eventNameEmpty","amountPeopleEmpty","nameChangedHandler","event","setState","target","value","amountPeopleChangedHandler","checkInput","checkFail","trim","onStart","Brand","Intro","Icon","src","startIcon","alt","style","marginTop","fontSize","InputFields","InputLabel","Input","type","placeholder","required","onChange","this","ErrorMessage","Component","connect","dispatch","actionTypes","backdrop","showBackdrop","Backdrop","backdropClicked","modal","showModal","closeModal","Modal","transform","opacity","item","itemType","RegularItem","ItemName","itemName","ItemPrice","itemPrice","currentPage","claimers","length","ClaimedItem","ItemInfo","Persons","map","person","id","foundPerson","persons","find","findPerson","personId","Person","name","includes","replace","charAt","AddItems","itemNameEmpty","scrollToBottom","itemsRef","scrollIntoView","behavior","openModalHandler","closeModalHandler","itemNameChangedHandler","itemPriceChangedHandler","val","original_len","caret_position","selectionStart","indexOf","dec_position","left","substring","right","new_length","refs","input","selectionEnd","console","log","saveItemHandler","onAddItem","ModalContent","InputField","ref","Buttons","AddButton","CancelButton","Items","items","ItemRow","Item","price","toFixed","RemoveItemButton","onRemoveItem","el","AddItemButton","Subtotal","SubtotalText","subtotal","onNextPage","header","Header","backClicked","BackButton","EventName","Layout","afterStart","onGoBack","ClaimItems","currentPerson","changePersonHandler","removePersonHandler","onRemovePerson","CurrentPerson","AddPersonButton","onAddPerson","EditPerson","PersonNameField","onChangeName","RemovePersonButton","Prompt","fontWeight","ClaimButton","onClaimItem","selectedPerson","selectedItem","Tax","PromptAndButton","SelectAllButton","onSelectAll","Checkbox","checked","taxed","onTaxItem","AdditionalFees","fees","amount","grandTotal","addFeeName","addFeeAmount","feeChanged","fee","input1","updateTotal","newTotal","inputAmount","parseFloat","i","addFeeNameChangedHandler","addFeeAmountChangedHandler","input2","addFeeHandler","newFee","updatedFees","concat","ModalInputField","SaveButton","Fees","Fee","FeeName","FixedAmount","onBlur","AddFeeButton","Total","onSplit","Results","showDetails","Array","fill","showDetailsHandler","tempArr","ResultItems","PersonsItems","PersonsRows","PersonRow","PersonNameShowDetails","NameShowDetails","PersonName","ShowDetailsButton","margin","ShowTrue","ShowFalse","Amount","Math","round","total","Details","foundItem","findItem","itemId","DetailRow","splitPrice","splitFees","keys","feeName","get","FeesAndTotal","FeeItem","GrandTotal","GrandTotalText","ViewReceiptButton","CloseButton","Receipt","ReceiptItems","FeesAndTotals","BackToBillButton","App","currentComponent","updateObject","oldObject","updatedProperties","intialState","taxedItemSubtotal","reducer","action","initialPersons","parseInt","push","itemNum","updatedItems","updatedPrice","updatedSubtotal","filter","_","updatedPerson","updatedPersons","updatedAmountPeople","AddedToPersons","updatedAmtPeople","itemsRemovedPerson","forEach","updatePersons","updateItems","personItems","updatePerson","itemClaimers","updateItem","currentItems","taxedSubtotal","updatedTaxItem","currentItemsSelectAll","itemsToTrue","feePercentages","currentFeePercentage","percentage","itemsToSplit","itemsWithSplit","itemSplitPrice","itemFeesMap","Map","feeAmount","set","personsWithFees","personTotal","splitFeesToUpdate","itemInfo","tempItem","initialFeeAmount","newFeeAmount","has","store","createStore","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8127045e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Results\":\"Results_Results__o_qOJ\",\"Header\":\"Results_Header__1oUl5\",\"ResultItems\":\"Results_ResultItems__3P7H1\",\"PersonsItems\":\"Results_PersonsItems__1CdW5\",\"PersonRow\":\"Results_PersonRow__17H_X\",\"PersonNameShowDetails\":\"Results_PersonNameShowDetails__3l6Ub\",\"Person\":\"Results_Person__2kMfo\",\"NameShowDetails\":\"Results_NameShowDetails__1sOpJ\",\"PersonName\":\"Results_PersonName__15QHJ\",\"ShowDetailsButton\":\"Results_ShowDetailsButton__2J8XH\",\"ShowTrue\":\"Results_ShowTrue__2xOfw\",\"ShowFalse\":\"Results_ShowFalse__1eGsv\",\"Amount\":\"Results_Amount__2TLzh\",\"Details\":\"Results_Details__2sRcC\",\"DetailRow\":\"Results_DetailRow__3HBMx\",\"FeesAndTotal\":\"Results_FeesAndTotal__1ONjP\",\"FeeItem\":\"Results_FeeItem__1N6Zd\",\"FeeName\":\"Results_FeeName__2XSGu\",\"GrandTotal\":\"Results_GrandTotal__2G_zw\",\"GrandTotalText\":\"Results_GrandTotalText__3D0qx\",\"Buttons\":\"Results_Buttons__2wuVJ\",\"ViewReceiptButton\":\"Results_ViewReceiptButton__3drb7\",\"CloseButton\":\"Results_CloseButton__1JnmL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AdditionalFees\":\"AdditionalFees_AdditionalFees__dk3QX\",\"Fees\":\"AdditionalFees_Fees__3iFeH\",\"Fee\":\"AdditionalFees_Fee__2_LrH\",\"FeeName\":\"AdditionalFees_FeeName__mFAAF\",\"AddFeeButton\":\"AdditionalFees_AddFeeButton__2cId2\",\"ModalContent\":\"AdditionalFees_ModalContent__3HvZD\",\"ModalInputField\":\"AdditionalFees_ModalInputField__gU26Q\",\"Buttons\":\"AdditionalFees_Buttons__JBUN3\",\"SaveButton\":\"AdditionalFees_SaveButton__2kHqR\",\"CancelButton\":\"AdditionalFees_CancelButton__HIUqN\",\"InputField\":\"AdditionalFees_InputField__s3ADS\",\"Total\":\"AdditionalFees_Total__2MaaU\",\"FixedAmount\":\"AdditionalFees_FixedAmount__1nI3o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Receipt\":\"Receipt_Receipt__ONY6r\",\"ReceiptItems\":\"Receipt_ReceiptItems__sVF2q\",\"Items\":\"Receipt_Items__15j7W\",\"Item\":\"Receipt_Item__3Kvl8\",\"FeesAndTotals\":\"Receipt_FeesAndTotals__1Fjkz\",\"FeeItem\":\"Receipt_FeeItem__3K7ka\",\"FeeName\":\"Receipt_FeeName__1Z9wl\",\"GrandTotal\":\"Receipt_GrandTotal__27fMZ\",\"GrandTotalText\":\"Receipt_GrandTotalText__Hl_eN\",\"Buttons\":\"Receipt_Buttons__3ZuTu\",\"BackToBillButton\":\"Receipt_BackToBillButton__Pb9Rn\",\"CloseButton\":\"Receipt_CloseButton__3bsKj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddItems\":\"AddItems_AddItems__mnJ3w\",\"Subtotal\":\"AddItems_Subtotal__ARiNr\",\"SubtotalText\":\"AddItems_SubtotalText__39Mrl\",\"Items\":\"AddItems_Items__25Gnh\",\"ItemRow\":\"AddItems_ItemRow__1Y89L\",\"RemoveItemButton\":\"AddItems_RemoveItemButton__1Wwbr\",\"AddItemButton\":\"AddItems_AddItemButton__3aO8s\",\"ModalContent\":\"AddItems_ModalContent__22bWN\",\"InputField\":\"AddItems_InputField__1ZzmD\",\"ErrorMessage\":\"AddItems_ErrorMessage__gXlhN\",\"Buttons\":\"AddItems_Buttons__39c3S\",\"AddButton\":\"AddItems_AddButton__1WceI\",\"CancelButton\":\"AddItems_CancelButton__2NnHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ClaimItems\":\"ClaimItems_ClaimItems__3JcUR\",\"Persons\":\"ClaimItems_Persons__2P7BZ\",\"Person\":\"ClaimItems_Person__1eMbM\",\"CurrentPerson\":\"ClaimItems_CurrentPerson__1PAys\",\"AddPersonButton\":\"ClaimItems_AddPersonButton__1wVsm\",\"EditPerson\":\"ClaimItems_EditPerson__1nPEU\",\"PersonNameField\":\"ClaimItems_PersonNameField__1m2SC\",\"RemovePersonButton\":\"ClaimItems_RemovePersonButton__16QFp\",\"Prompt\":\"ClaimItems_Prompt__3RJCM\",\"Items\":\"ClaimItems_Items__1N__7\",\"ItemRow\":\"ClaimItems_ItemRow__2FLCq\",\"ClaimButton\":\"ClaimItems_ClaimButton__3iwOK\",\"Subtotal\":\"ClaimItems_Subtotal__1U-sW\",\"SubtotalText\":\"ClaimItems_SubtotalText__tzJoO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Start\":\"Start_Start__2KHhj\",\"Brand\":\"Start_Brand__3T9Rp\",\"Icon\":\"Start_Icon__38MdQ\",\"Intro\":\"Start_Intro__1RSUu\",\"InputFields\":\"Start_InputFields__2-Z-7\",\"InputLabel\":\"Start_InputLabel__3fTlP\",\"Input\":\"Start_Input__1QcZ_\",\"ErrorMessage\":\"Start_ErrorMessage__12x0G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RegularItem\":\"Item_RegularItem__31RIZ\",\"ItemName\":\"Item_ItemName__1ZGeh\",\"ItemPrice\":\"Item_ItemPrice___QGZc\",\"ClaimedItem\":\"Item_ClaimedItem__2m9ot\",\"ItemInfo\":\"Item_ItemInfo__2VYd8\",\"Persons\":\"Item_Persons__FFxxV\",\"Person\":\"Item_Person__3sQ35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tax\":\"Tax_Tax__Rj8DN\",\"PromptAndButton\":\"Tax_PromptAndButton__2AB3o\",\"SelectAllButton\":\"Tax_SelectAllButton__aHnjW\",\"Items\":\"Tax_Items__2CVV6\",\"ItemRow\":\"Tax_ItemRow__3JQYP\",\"Checkbox\":\"Tax_Checkbox__1V879\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__FXvex\",\"BackButton\":\"Header_BackButton__2gUwK\",\"EventName\":\"Header_EventName__3OeXA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProceedDiv\":\"ProceedDiv_ProceedDiv__1wLgH\",\"ProceedButton\":\"ProceedDiv_ProceedButton__1YV3e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__1llUs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1Mp7D\"};","import React from 'react';\r\n\r\nimport classes from './ProceedDiv.module.css';\r\n\r\nconst proceedDiv = (props) => {\r\n    return (\r\n        <div className={classes.ProceedDiv}>\r\n            <button className={classes.ProceedButton} onClick={props.clicked}>\r\n                {props.children}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default proceedDiv;","export const ON_START = \"ON_START\"\r\nexport const NEXT_PAGE = \"NEXT_PAGE\"\r\nexport const ADD_ITEM = \"ADD_ITEM\"\r\nexport const REMOVE_ITEM = \"REMOVE_ITEM\"\r\nexport const GO_BACK = \"GO_BACK\"\r\nexport const CHANGE_NAME = \"CHANGE_NAME\"\r\nexport const ADD_PERSON = \"ADD_PERSON\"\r\nexport const REMOVE_PERSON = \"REMOVE PERSON\"\r\nexport const CLAIM_ITEM = \"CLAIM_ITEM\"\r\nexport const TAX_ITEM = \"TAX_ITEM\"\r\nexport const SELECT_ALL_ITEMS = \"SELECT_ALL_ITEMS\"\r\nexport const ON_SPLIT = \"ON_SPLIT\"\r\n","export default __webpack_public_path__ + \"static/media/start-icon.371c7da5.png\";","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ProceedDiv from '../../shared/ProceedDiv/ProceedDiv';\r\n\r\nimport * as actionTypes from '../../store/actions';\r\nimport classes from './Start.module.css';\r\nimport startIcon from '../../assets/start-icon.png';\r\n\r\nclass Start extends Component {\r\n    state = {\r\n        eventName: \"\",\r\n        amountPeople: \"\",\r\n        eventNameEmpty: false,\r\n        amountPeopleEmpty: false\r\n    }\r\n\r\n    // Input handlers\r\n    nameChangedHandler = (event) => {\r\n        this.setState({ eventName: event.target.value, eventNameEmpty: false });\r\n    }\r\n\r\n    amountPeopleChangedHandler = (event) => {\r\n        this.setState({ amountPeople: event.target.value, amountPeopleEmpty: false });\r\n    }\r\n\r\n    // Check inputs when \"Start\" is pressed\r\n    checkInput = () => {\r\n        let checkFail = false;\r\n\r\n        // check if event name field is empty\r\n        if (this.state.eventName.trim() === \"\") {\r\n            this.setState({ eventNameEmpty: true, eventName: \"\" });\r\n            checkFail = true;\r\n        }\r\n        // check if amount of people field is empty\r\n        if (this.state.amountPeople === \"\") {\r\n            this.setState({ amountPeopleEmpty: true });\r\n            checkFail = true;\r\n        }\r\n\r\n        // if check did not fail, proceed to next step\r\n        if (checkFail === false) {\r\n            this.props.onStart(this.state.eventName, this.state.amountPeople);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Start}>\r\n                <p className={classes.Brand}>ezSplit</p>\r\n                <div className={classes.Intro}>\r\n                    <img className={classes.Icon} src={startIcon} alt=\"ezSplit\"/>\r\n                    <h1 style={{marginTop:'0px'}}>Split a Bill</h1>\r\n                    <h2 style={{fontSize:'16px'}}>Taxes, tips, we got you covered</h2>\r\n                </div>\r\n                <div className={classes.InputFields}>\r\n                    <p className={classes.InputLabel}>Event name</p>\r\n                    <input\r\n                        className={classes.Input}\r\n                        type=\"text\"\r\n                        placeholder=\"e.g Brunch\"\r\n                        required\r\n                        onChange={(event) => this.nameChangedHandler(event)}\r\n                        value={this.state.eventName}\r\n                    />\r\n                    {this.state.eventNameEmpty === true ?\r\n                        <p className={classes.ErrorMessage}>Event name is required.</p>\r\n                        : <p className={classes.ErrorMessage}>&nbsp;</p>\r\n                    }\r\n                    <p className={classes.InputLabel}>Amount of people</p>\r\n                    <input\r\n                        className={classes.Input}\r\n                        type=\"number\"\r\n                        placeholder=\"e.g 3\"\r\n                        required\r\n                        onChange={(event) => this.amountPeopleChangedHandler(event)}\r\n                        value={this.state.amountPeople}\r\n                    />\r\n                    {this.state.amountPeopleEmpty === true ?\r\n                        <p className={classes.ErrorMessage}>Amount of people is required.</p>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <ProceedDiv clicked={this.checkInput}>\r\n                    Let's start\r\n                </ProceedDiv>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        eventName: state.eventName,\r\n        amountPeople: state.amountPeople\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onStart: (eventName, amountPeople) => dispatch({ type: actionTypes.ON_START, eventName: eventName, amountPeople: amountPeople })\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Start);","import React from 'react';\r\n\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) => (\r\n    props.showBackdrop \r\n        ? <div className={classes.Backdrop} onClick={props.backdropClicked}></div>\r\n        : null\r\n);\r\n\r\nexport default backdrop;","import React, {Fragment} from 'react';\r\n\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport classes from './Modal.module.css';\r\n\r\nconst modal = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <Backdrop showBackdrop={props.showModal} backdropClicked={props.closeModal}/>\r\n            <div\r\n                className={classes.Modal}\r\n                style={{\r\n                    transform: props.showModal ? 'translateY(0)' : 'translateY(-100vh)',\r\n                    opacity: props.showModal ? '1' : '0'\r\n                }}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default modal;","import React from 'react';\r\n\r\nimport classes from './Item.module.css';\r\n\r\nconst item = (props) => {\r\n    //if on AddItems or on ClaimItems but item has no claimers, show regular type\r\n    let itemType = <div className={classes.RegularItem}>\r\n        <p className={classes.ItemName}>{props.itemName}</p>\r\n        <p className={classes.ItemPrice}>${props.itemPrice}</p>\r\n    </div>\r\n\r\n    //if on ClaimItems page and item has claimers, show claimedItem type\r\n    if (props.currentPage === 2 && props.claimers.length > 0) {\r\n        itemType = <div className={classes.ClaimedItem}>\r\n            <div className={classes.ItemInfo}>\r\n                <p className={classes.ItemName}>{props.itemName}</p>\r\n                <p className={classes.ItemPrice}>${props.itemPrice}</p>\r\n            </div>\r\n            <div className={classes.Persons}>\r\n                {props.claimers.map((person, id) => {\r\n                    //look for person name in persons array\r\n                    let foundPerson = props.persons.find(findPerson => person === findPerson.personId);\r\n                    //display the item & the split price\r\n                    return <div key={id} className={classes.Person}>\r\n                        {foundPerson.name.includes(\"Person\") === true ?\r\n                            foundPerson.name.replace(/\\D/g, \"\")\r\n                            : foundPerson.name.charAt(0)\r\n                        }\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    return itemType;\r\n}\r\n\r\nexport default item;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./AddItems.module.css\";\r\nimport ProceedDiv from '../../shared/ProceedDiv/ProceedDiv';\r\nimport Modal from \"../../shared/Modal/Modal\";\r\nimport * as actionTypes from \"../../store/actions\";\r\nimport Item from \"../../shared/Item/Item\";\r\n\r\nclass AddItems extends Component {\r\n    state = {\r\n        showModal: false,\r\n        itemName: \"\",\r\n        itemPrice: \"\",\r\n        itemNameEmpty: false\r\n    }\r\n\r\n    //scroll to bottom of list of items\r\n    scrollToBottom = () => {\r\n        this.itemsRef.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    //scroll to bottom of list of items\r\n    componentDidMount () {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    //scroll to bottom of list of items when new item added\r\n    componentDidUpdate () {\r\n        this.scrollToBottom();\r\n    }\r\n    \r\n\r\n    //add items clicked\r\n    openModalHandler = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    //cancel or backdrop clicked\r\n    closeModalHandler = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    //change in item name input\r\n    itemNameChangedHandler = (event) => {\r\n        this.setState({ itemName: event.target.value, itemNameEmpty: false });\r\n    }\r\n\r\n    //change in price input\r\n    itemPriceChangedHandler = (event) => {\r\n        let val = event.target.value;\r\n\r\n        //no validation needed for empty string\r\n        if (val === \"\") {\r\n            this.setState({ itemPrice: event.target.value });\r\n            return;\r\n        }\r\n\r\n        //note for caret position\r\n        let original_len = val.length;\r\n        let caret_position = event.target.selectionStart;\r\n\r\n        //if decimal entered\r\n        if (val.indexOf(\".\") >= 0) {\r\n            //position of decimal\r\n            let dec_position = val.indexOf(\".\");\r\n\r\n            //split # by decimal \r\n            let left = val.substring(0, dec_position);\r\n            let right = val.substring(dec_position);\r\n\r\n            //validate numbers\r\n            left = left.replace(/\\D/g, \"\");\r\n            right = right.replace(/\\D/g, \"\");\r\n\r\n            //limit right side to only 2 digits\r\n            right = right.substring(0,2);\r\n\r\n            //join number\r\n            val = left + \".\" + right;\r\n        }\r\n        //if no decimal entered\r\n        else {\r\n            //add commas to # & remove all non-digits\r\n            val = val.replace(/\\D/g, \"\");\r\n        }\r\n\r\n        //set caret to last position\r\n        let new_length = val.length;\r\n        caret_position = new_length - original_len + caret_position;\r\n\r\n        //update state & set caret\r\n        this.setState({ itemPrice: val },\r\n            () => {\r\n                this.refs.input.selectionStart = this.refs.input.selectionEnd = caret_position;\r\n            });\r\n    }\r\n\r\n    //check input when \"Save\" is pressed\r\n    checkInput = () => {\r\n        let checkFail = false;\r\n\r\n        // check if item name field is empty\r\n        if (this.state.itemName.trim() === \"\") {\r\n            console.log(\"empty\");\r\n            this.setState({itemNameEmpty: true, itemName: \"\"});\r\n            checkFail = true;\r\n        }\r\n\r\n        // if check did not fail, proceed to save item\r\n        if (checkFail === false) {\r\n            this.saveItemHandler();\r\n        }\r\n    }\r\n\r\n\r\n    //save item name & price, reset modal\r\n    saveItemHandler = () => {\r\n        this.props.onAddItem(this.state.itemName, this.state.itemPrice);\r\n        this.setState({ showModal: false, itemName: \"\", itemPrice: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.AddItems}>\r\n                <Modal\r\n                    showModal={this.state.showModal}\r\n                    closeModal={this.closeModalHandler}\r\n                >\r\n                    <div className={classes.ModalContent}>\r\n                    <input\r\n                        className={classes.InputField}\r\n                        type=\"text\"\r\n                        placeholder=\"e.g. Coffee\"\r\n                        onChange={(event) => this.itemNameChangedHandler(event)}\r\n                        value={this.state.itemName}\r\n                    />\r\n                    {this.state.itemNameEmpty === true ? \r\n                        <p className={classes.ErrorMessage}>Item name is required.</p>\r\n                        : null\r\n                    }\r\n                    <p>\r\n                        $\r\n                        <input\r\n                            className={classes.InputField}\r\n                            ref=\"input\"\r\n                            type=\"text\"\r\n                            placeholder=\"0.00\"\r\n                            onChange={(event) =>\r\n                                this.itemPriceChangedHandler(event)\r\n                            }\r\n                            value={this.state.itemPrice}\r\n                        />\r\n                    </p>\r\n                    </div>\r\n                    <div className={classes.Buttons}>\r\n                        <button className={classes.AddButton} onClick={this.checkInput}>ADD</button>\r\n                        <button className={classes.CancelButton} onClick={this.closeModalHandler}>CANCEL</button>\r\n                    </div>\r\n                </Modal>\r\n                <div className={classes.Items}>\r\n                    {this.props.items.map((item, id) => (\r\n                        <div className={classes.ItemRow} key={id}>\r\n                            <Item\r\n                                itemName={item.name}\r\n                                itemPrice={item.price.toFixed(2)}\r\n                                currentPage={this.props.currentPage}\r\n                                claimers={this.props.items[id].claimers}\r\n                            />\r\n                            <button\r\n                                className={classes.RemoveItemButton}\r\n                                onClick={() => this.props.onRemoveItem(id)}\r\n                            >\r\n                                -\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                    <div ref={(el) => {this.itemsRef = el;}}></div>\r\n                </div>\r\n                <button\r\n                    className={classes.AddItemButton}\r\n                    onClick={this.openModalHandler}\r\n                >\r\n                    + Add an Item\r\n                </button>\r\n                <div className={classes.Subtotal}>\r\n                    <p className={classes.SubtotalText}>Subtotal</p>\r\n                    <p>${this.props.subtotal.toFixed(2)}</p>\r\n                </div>\r\n                <ProceedDiv clicked={this.props.onNextPage}>\r\n                    Next\r\n                </ProceedDiv>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subtotal: state.subtotal,\r\n        items: state.items,\r\n        currentPage: state.currentPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAddItem: (name, price) =>\r\n            dispatch({ type: actionTypes.ADD_ITEM, name: name, price: price }),\r\n        onRemoveItem: (id) =>\r\n            dispatch({ type: actionTypes.REMOVE_ITEM, id: id }),\r\n        onNextPage: () => dispatch({ type: actionTypes.NEXT_PAGE })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddItems);\r\n","import React from 'react';\r\n\r\nimport classes from './Header.module.css';\r\n\r\nconst header = (props) => {\r\n    return (\r\n        <div className={classes.Header}>\r\n            <button onClick={props.backClicked} className={classes.BackButton}>&lt;</button>\r\n            <span className={classes.EventName}>{props.eventName}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default header;","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\n\r\nimport Header from \"../../shared/Header/Header\"\r\nimport * as actionTypes from \"../../store/actions\"\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        //show Header & ProceedDiv after page 1\r\n        let afterStart = (\r\n            <div>\r\n                <Header\r\n                    eventName={this.props.eventName}\r\n                    backClicked={this.props.onGoBack}\r\n                />\r\n                {this.props.children}\r\n                \r\n            </div>\r\n        );\r\n        \r\n        return this.props.currentPage > 0 ? afterStart\r\n            : <div>{this.props.children}</div>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        eventName: state.eventName,\r\n        currentPage: state.currentPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGoBack: () => dispatch({ type: actionTypes.GO_BACK })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./ClaimItems.module.css\";\r\nimport Item from \"../../shared/Item/Item\";\r\nimport ProceedDiv from '../../shared/ProceedDiv/ProceedDiv';\r\nimport * as actionTypes from \"../../store/actions\";\r\n\r\nclass ClaimItems extends Component {\r\n    //local state\r\n    state = {\r\n        currentPerson: 0\r\n    }\r\n\r\n    //selected person\r\n    changePersonHandler = (id) => {\r\n        this.setState({ currentPerson: id });\r\n    }\r\n\r\n    //remove selected person\r\n    removePersonHandler = () => {\r\n        this.props.onRemovePerson(this.state.currentPerson);\r\n\r\n        //if 1st person removed, reset selected person to next person\r\n        if (this.state.currentPerson === 0) {\r\n            this.setState({ currentPerson: this.state.currentPerson });\r\n        }\r\n        //if not 1st person removed, reset selected person to previous person\r\n        else {\r\n            this.setState({ currentPerson: this.state.currentPerson - 1 });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.ClaimItems}>\r\n                <div className={classes.Persons}>\r\n                    {this.props.persons.map((person, id) => (\r\n                        <div\r\n                            key={id}\r\n                            className={id === this.state.currentPerson ? classes.CurrentPerson : classes.Person}\r\n                            onClick={() => this.changePersonHandler(id)}\r\n                        >\r\n                            {person.name.includes(\"Person\") === true ?\r\n                                person.name.replace(/\\D/g, \"\")\r\n                                : person.name.charAt(0)\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                    <button className={classes.AddPersonButton} onClick={this.props.onAddPerson}>+</button>\r\n                </div>\r\n                <div className={classes.EditPerson}>\r\n                    <input\r\n                        className={classes.PersonNameField}\r\n                        type=\"text\"\r\n                        value={this.props.persons[this.state.currentPerson].name}\r\n                        onChange={(event) =>\r\n                            this.props.onChangeName(event, this.state.currentPerson)\r\n                        }\r\n                    />\r\n                    <button className={classes.RemovePersonButton} onClick={this.removePersonHandler}>-</button>\r\n                </div>\r\n\r\n                <p className={classes.Prompt}>Which items did <span style={{ fontWeight: 'bold' }}>{this.props.persons[this.state.currentPerson].name}</span> split?</p>\r\n\r\n                <div className={classes.Items}>\r\n                    {this.props.items.map((item, id) => (\r\n                        <div key={id} className={classes.ItemRow}>\r\n                            <Item\r\n                                itemName={item.name}\r\n                                itemPrice={item.price.toFixed(2)}\r\n                                currentPage={this.props.currentPage}\r\n                                claimers={this.props.items[id].persons}\r\n                                persons={this.props.persons}\r\n                            />\r\n                            <button\r\n                                className={classes.ClaimButton}\r\n                                onClick={() =>\r\n                                    this.props.onClaimItem(\r\n                                        this.state.currentPerson,\r\n                                        id\r\n                                    )\r\n                                }\r\n                            >\r\n                                Claim\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className={classes.Subtotal}>\r\n                    <p className={classes.SubtotalText}>Subtotal</p>\r\n                    <p>${this.props.subtotal.toFixed(2)}</p>\r\n                </div>\r\n                <ProceedDiv clicked={this.props.onNextPage}>\r\n                    NEXT\r\n                </ProceedDiv>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state.items,\r\n        persons: state.persons,\r\n        currentPage: state.currentPage,\r\n        subtotal: state.subtotal\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangeName: (event, id) =>\r\n            dispatch({ type: actionTypes.CHANGE_NAME, event: event, id: id }),\r\n        onAddPerson: () => dispatch({ type: actionTypes.ADD_PERSON }),\r\n        onRemovePerson: (id) =>\r\n            dispatch({ type: actionTypes.REMOVE_PERSON, id: id }),\r\n        onClaimItem: (selectedPerson, selectedItem) =>\r\n            dispatch({\r\n                type: actionTypes.CLAIM_ITEM,\r\n                selectedPerson: selectedPerson,\r\n                selectedItem: selectedItem\r\n            }),\r\n        onNextPage: () => dispatch({ type: actionTypes.NEXT_PAGE })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimItems);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from \"./Tax.module.css\";\r\nimport Item from \"../../shared/Item/Item\";\r\nimport ProceedDiv from '../../shared/ProceedDiv/ProceedDiv';\r\nimport * as actionTypes from \"../../store/actions\";\r\n\r\nclass Tax extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Tax}>\r\n                <div className={classes.PromptAndButton}>\r\n                    <p className={classes.Prompt}>Which items were taxed?</p>\r\n                    <button \r\n                        className={classes.SelectAllButton} \r\n                        onClick={() => this.props.onSelectAll()}>\r\n                        Select all\r\n                    </button>\r\n                </div>\r\n\r\n                <div className={classes.Items}>\r\n                {this.props.items.map((item, id) => (\r\n                    <div key={id} className={classes.ItemRow}>\r\n                        <Item\r\n                            itemName={item.name}\r\n                            itemPrice={item.price.toFixed(2)}\r\n                            currentPage={this.props.currentPage}\r\n                            claimers={item.persons}\r\n                        />\r\n                        <input\r\n                            className={classes.Checkbox}\r\n                            type=\"checkbox\"\r\n                            checked={item.taxed}\r\n                            onChange={() => this.props.onTaxItem(id)}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                <ProceedDiv clicked={this.props.onNextPage}>\r\n                    NEXT\r\n                </ProceedDiv>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state.items,\r\n        persons: state.persons,\r\n        currentPage: state.currentPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onTaxItem: (selectedItem) =>\r\n            dispatch({ type: actionTypes.TAX_ITEM, selectedItem: selectedItem }),\r\n        onSelectAll: () => dispatch({ type: actionTypes.SELECT_ALL_ITEMS }),\r\n        onNextPage: () => dispatch({ type: actionTypes.NEXT_PAGE })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tax);\r\n","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\n\r\nimport classes from \"./AdditionalFees.module.css\"\r\nimport Modal from \"../../shared/Modal/Modal\"\r\nimport ProceedDiv from \"../../shared/ProceedDiv/ProceedDiv\"\r\nimport * as actionTypes from \"../../store/actions\"\r\n\r\nclass AdditionalFees extends Component {\r\n    state = {\r\n        fees: [\r\n            {\r\n                name: \"Tax\",\r\n                amount: \"0.00\",\r\n            },\r\n            {\r\n                name: \"Tip\",\r\n                amount: \"0.00\",\r\n            },\r\n        ],\r\n        grandTotal: this.props.subtotal,\r\n        showModal: false,\r\n        addFeeName: \"\",\r\n        addFeeAmount: \"\"\r\n    }\r\n\r\n    //fee amount inline change\r\n    feeChanged = (event, id) => {\r\n        //make copy of fees array\r\n        let fees = [...this.state.fees];\r\n        //make copy of fee object\r\n        let fee = { ...fees[id] };\r\n\r\n        //validate input\r\n        let val = event.target.value;\r\n\r\n        //no validation needed for empty string\r\n        if (val === \"\") {\r\n            //update amount\r\n            fee.amount = event.target.value;\r\n            //set object to updated object\r\n            fees[id] = fee;\r\n\r\n            //update state to new updated copy\r\n            this.setState({ fees });\r\n            return;\r\n        }\r\n\r\n        //note for caret position\r\n        let original_len = val.length;\r\n        let caret_position = event.target.selectionStart;\r\n\r\n        //if decimal entered\r\n        if (val.indexOf(\".\") >= 0) {\r\n            //position of decimal\r\n            let dec_position = val.indexOf(\".\");\r\n\r\n            //split # by decimal \r\n            let left = val.substring(0, dec_position);\r\n            let right = val.substring(dec_position);\r\n\r\n            //validate numbers\r\n            left = left.replace(/\\D/g, \"\");\r\n            if (left.length > 1) {\r\n                left = left.replace(/\\b0+/g, '');\r\n            }\r\n            right = right.replace(/\\D/g, \"\");\r\n\r\n            //limit right side to only 2 digits\r\n            right = right.substring(0, 2);\r\n\r\n            //join number\r\n            val = left + \".\" + right;\r\n        }\r\n        //if no decimal entered\r\n        else {\r\n            //add commas to # & remove all non-digits\r\n            val = val.replace(/\\D/g, \"\").replace(/\\b0+/g, '');\r\n        }\r\n\r\n        //update amount\r\n        fee.amount = val;\r\n        //set object to updated object\r\n        fees[id] = fee;\r\n\r\n        //set caret to last position\r\n        let new_length = val.length;\r\n        caret_position = new_length - original_len + caret_position;\r\n\r\n        //update state to new updated copy & set caret\r\n        this.setState({ fees },\r\n            () => {\r\n                this.refs.input1.selectionStart = this.refs.input1.selectionEnd = caret_position;\r\n            });\r\n    }\r\n\r\n    //when user leaves input field\r\n    updateTotal = (event, id) => {\r\n        let newTotal = this.state.grandTotal;\r\n\r\n        //make copy of fees array\r\n        let fees = [...this.state.fees];\r\n        //make copy of fee object\r\n        let fee = { ...fees[id] };\r\n\r\n        //default input amount as $0\r\n        let inputAmount = 0;\r\n\r\n        //if input is not empty or value is not 0, set inputAmount as the input value\r\n        if (event.target.value !== \"\" && parseFloat(event.target.value) > 0) {\r\n            inputAmount = parseFloat(event.target.value);\r\n        }\r\n\r\n        //get updated grandtotal\r\n        //start with subtotal\r\n        newTotal = this.props.subtotal;\r\n        //go through each fee amounts\r\n        for (let i = 0; i < this.state.fees.length; i++) {\r\n            //if not selected fee, add to new total\r\n            if (i !== id) {\r\n                newTotal = newTotal + parseFloat(this.state.fees[i].amount);\r\n            }\r\n        }\r\n        //add current fee\r\n        newTotal = newTotal + inputAmount;\r\n        //update amount & update fee to 2 decimal places string\r\n        fee.amount = inputAmount.toFixed(2);\r\n\r\n        //set object to updated object\r\n        fees[id] = fee;\r\n\r\n        //update state with new total & fees\r\n        this.setState({ grandTotal: newTotal, fees: fees });\r\n    }\r\n\r\n    //add additional fees clicked\r\n    openModalHandler = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    //cancel or backdrop clicked\r\n    closeModalHandler = () => {\r\n        this.setState({\r\n            showModal: false,\r\n            addFeeName: 0,\r\n            addFeeAmount: 0,\r\n        });\r\n    }\r\n\r\n    //name change in add fee modal\r\n    addFeeNameChangedHandler = (event) => {\r\n        this.setState({ addFeeName: event.target.value });\r\n    }\r\n\r\n    //amount change in add fee modal\r\n    addFeeAmountChangedHandler = (event) => {\r\n        let val = event.target.value;\r\n\r\n        //no validation needed for empty string\r\n        if (val === \"\") {\r\n            this.setState({ addFeeAmount: event.target.value });\r\n            return;\r\n        }\r\n\r\n        //note for caret position\r\n        let original_len = val.length;\r\n        let caret_position = event.target.selectionStart;\r\n\r\n        //if decimal entered\r\n        if (val.indexOf(\".\") >= 0) {\r\n            //position of decimal\r\n            let dec_position = val.indexOf(\".\");\r\n\r\n            //split # by decimal \r\n            let left = val.substring(0, dec_position);\r\n            let right = val.substring(dec_position);\r\n\r\n            //validate numbers\r\n            left = left.replace(/\\D/g, \"\");\r\n            right = right.replace(/\\D/g, \"\");\r\n\r\n            //limit right side to only 2 digits\r\n            right = right.substring(0, 2);\r\n\r\n            //join number\r\n            val = left + \".\" + right;\r\n        }\r\n        //if no decimal entered\r\n        else {\r\n            //add commas to # & remove all non-digits\r\n            val = val.replace(/\\D/g, \"\");\r\n        }\r\n\r\n        //set caret to last position\r\n        let new_length = val.length;\r\n        caret_position = new_length - original_len + caret_position;\r\n\r\n        //update state & set caret\r\n        this.setState({ addFeeAmount: val },\r\n            () => {\r\n                this.refs.input2.selectionStart = this.refs.input2.selectionEnd = caret_position;\r\n            });\r\n    }\r\n\r\n    //save clicked on modal upon adding fee\r\n    addFeeHandler = () => {\r\n        //new fee object\r\n        let newFee = {\r\n            name: this.state.addFeeName,\r\n            amount: parseFloat(this.state.addFeeAmount)\r\n        };\r\n\r\n        //update grand total\r\n        let newTotal = this.state.grandTotal;\r\n        //start with subtotal\r\n        newTotal = this.props.subtotal;\r\n        //go through each fee amounts, add to new total\r\n        for (let i = 0; i < this.state.fees.length; i++) {\r\n            newTotal = newTotal + parseFloat(this.state.fees[i].amount);\r\n        }\r\n        //add new fee amount\r\n        newTotal = newTotal + parseFloat(this.state.addFeeAmount);\r\n\r\n        //add new fee object to array of fees objects\r\n        let updatedFees = [...this.state.fees].concat(newFee);\r\n        //update fees array & reset modal input states\r\n        this.setState({\r\n            fees: updatedFees,\r\n            addFeeName: \"\",\r\n            addFeeAmount: \"\",\r\n            grandTotal: newTotal,\r\n            showModal: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.AdditionalFees}>\r\n                <Modal\r\n                    showModal={this.state.showModal}\r\n                    closeModal={this.closeModalHandler}\r\n                >\r\n                    <div className={classes.ModalContent}>\r\n                        <input\r\n                            className={classes.ModalInputField}\r\n                            ref=\"input2\"\r\n                            type=\"text\"\r\n                            placeholder=\"e.g. Service Fee\"\r\n                            value={this.state.addFeeName}\r\n                            onChange={this.addFeeNameChangedHandler}\r\n                        />\r\n                        <p>\r\n                            $\r\n                            <input\r\n                                className={classes.ModalInputField}\r\n                                type=\"text\"\r\n                                placeholder=\"0.00\"\r\n                                value={this.state.addFeeAmount}\r\n                                onChange={this.addFeeAmountChangedHandler}\r\n                            />\r\n                        </p>\r\n                        <div className={classes.Buttons}>\r\n                            <button className={classes.SaveButton} onClick={this.addFeeHandler}>Save</button>\r\n                            <button className={classes.CancelButton} onClick={this.closeModalHandler}>Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n                <div className={classes.Fees}>\r\n                    <div className={classes.Fee}>\r\n                        <p className={classes.FeeName}>Subtotal</p>\r\n                        <p className={classes.FixedAmount}>${this.props.subtotal.toFixed(2)}</p>\r\n                    </div>\r\n                    {this.state.fees.map((fee, id) => (\r\n                        <div className={classes.Fee} key={id}>\r\n                            <p className={classes.FeeName}>{fee.name}</p>\r\n                            <p>\r\n                                $\r\n                                <input\r\n                                    className={classes.InputField}\r\n                                    ref=\"input1\"\r\n                                    type=\"text\"\r\n                                    value={fee.amount}\r\n                                    onBlur={(event) =>\r\n                                        this.updateTotal(event, id)\r\n                                    }\r\n                                    onChange={(event) =>\r\n                                        this.feeChanged(event, id)\r\n                                    }\r\n                                />\r\n                            </p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <button className={classes.AddFeeButton} onClick={this.openModalHandler}>\r\n                    + Additional fees\r\n                </button>\r\n                <div className={classes.Total}>\r\n                    <p className={classes.FeeName}>Grandtotal</p>\r\n                    <p className={classes.FixedAmount}>${this.state.grandTotal.toFixed(2)}</p>\r\n                </div>\r\n                <ProceedDiv\r\n                    clicked={() =>\r\n                        this.props.onSplit(\r\n                            this.state.fees,\r\n                            this.state.grandTotal\r\n                        )\r\n                    }\r\n                >\r\n                    Split\r\n                </ProceedDiv>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        subtotal: state.subtotal,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSplit: (fees, grandTotal) =>\r\n            dispatch({\r\n                type: actionTypes.ON_SPLIT,\r\n                fees: fees,\r\n                grandTotal: grandTotal,\r\n            }),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AdditionalFees);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from './Results.module.css';\r\nimport * as actionTypes from '../../store/actions'\r\n\r\nclass Results extends Component {\r\n    state = {\r\n        showDetails: new Array(this.props.persons.length).fill(false)\r\n    }\r\n\r\n    showDetailsHandler = (id) => {\r\n        //make copy of showDetails array\r\n        let tempArr = [...this.state.showDetails];\r\n        //change index to true\r\n        tempArr[id] = !tempArr[id];\r\n        //set state\r\n        this.setState({ showDetails: tempArr });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Results}>\r\n                <h2 className={classes.Header}>Your Split Bill</h2>\r\n                <div className={classes.ResultItems}>\r\n                    <div className={classes.PersonsItems}>\r\n                        {this.props.persons.map((person, id) => (\r\n                            <div className={classes.PersonsRows} key={id}>\r\n                                <div className={classes.PersonRow}>\r\n                                    <div className={classes.PersonNameShowDetails}>\r\n                                        <div className={classes.Person}>\r\n                                            {person.name.includes(\"Person\") === true ?\r\n                                                person.name.replace(/\\D/g, \"\")\r\n                                                : person.name.charAt(0)\r\n                                            }\r\n                                        </div>\r\n                                        <div className={classes.NameShowDetails}>\r\n                                            <p className={classes.PersonName}>{person.name}</p>\r\n                                            <button className={classes.ShowDetailsButton} onClick={() => this.showDetailsHandler(id)}>\r\n                                                {this.state.showDetails[id] === false\r\n                                                    ? <p style={{margin:\"0px\",fontSize:\"12px\"}}>Show Details <span className={classes.ShowTrue}>&#62;</span></p>\r\n                                                    : <p style={{margin:\"0px\",fontSize:\"12px\"}}>Hide Details <span className={classes.ShowFalse}>&#62;</span></p>\r\n                                                }\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={classes.Amount}>\r\n                                        ${(Math.round(person.total * 100) / 100).toFixed(2)}\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.Details}>\r\n                                    {this.state.showDetails[id] === true\r\n                                        ? <div>{person.items.map((item, id) => {\r\n                                            //look for item that the person claimed in items array\r\n                                            let foundItem = this.props.items.find(findItem => item === findItem.itemId);\r\n                                            //display the item & the split price\r\n                                            return <p className={classes.DetailRow} key={id}>\r\n                                                <span>{foundItem.name}</span>\r\n                                                <span>${foundItem.splitPrice.toFixed(2)}</span>\r\n                                            </p>\r\n                                        })}\r\n                                            {[...person.splitFees.keys()].map((feeName, id) => {\r\n                                                return <p className={classes.DetailRow} key={id}>\r\n                                                    <span>{feeName}</span>\r\n                                                    <span>${person.splitFees.get(feeName).toFixed(2)}</span>\r\n                                                </p>\r\n                                            })}\r\n                                        </div>\r\n                                        : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className={classes.FeesAndTotal}>\r\n                        <div className={classes.FeeItem}>\r\n                            <span className={classes.FeeName}>Subtotal</span>\r\n                            <span className={classes.Amount}>${this.props.subtotal.toFixed(2)}</span>\r\n                        </div>\r\n                        {this.props.fees.map((fee, id) => (\r\n                            <div className={classes.FeeItem} key={id}>\r\n                                <span className={classes.FeeName}>{fee.name}</span>\r\n                                <span className={classes.Amount}>${fee.amount}</span>\r\n                            </div>\r\n                        ))}\r\n\r\n                        <div className={classes.GrandTotal}>\r\n                            <span className={classes.GrandTotalText}>Grand Total</span>\r\n                            <span className={classes.Amount}>${this.props.total.toFixed(2)}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.Buttons}>\r\n                    <button className={classes.ViewReceiptButton} onClick={this.props.onNextPage}>View Receipt</button>\r\n                    <button className={classes.CloseButton}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state.items,\r\n        persons: state.persons,\r\n        subtotal: state.subtotal,\r\n        fees: state.fees,\r\n        total: state.total\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onNextPage: () => dispatch({ type: actionTypes.NEXT_PAGE })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport classes from './Receipt.module.css';\r\nimport * as actionTypes from '../../store/actions'\r\n\r\nclass Receipt extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.Receipt}>\r\n                <div className={classes.ReceiptItems}>\r\n                    <div className={classes.Items}>\r\n                        {this.props.items.map((item, id) =>\r\n                            <div className={classes.Item} key={id}>\r\n                                <span>{item.name}</span>\r\n                                <span>${item.price.toFixed(2)}</span>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <div className={classes.FeesAndTotals}>\r\n                        <div className={classes.FeeItem}>\r\n                            <span className={classes.FeeName}>Subtotal</span>\r\n                            <span className={classes.Amount}>${this.props.subtotal.toFixed(2)}</span>\r\n                        </div>\r\n                        {this.props.fees.map((fee, id) => (\r\n                            <div className={classes.FeeItem} key={id}>\r\n                                <span className={classes.FeeName}>{fee.name}</span>\r\n                                <span className={classes.Amount}>${parseFloat(fee.amount).toFixed(2)}</span>\r\n                            </div>\r\n                        ))}\r\n                        <div className={classes.GrandTotal}>\r\n                            <span className={classes.GrandTotalText}>Grand Total</span>\r\n                            <span className={classes.Amount}>{this.props.total.toFixed(2)}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.Buttons}>\r\n                <button className={classes.BackToBillButton} onClick={this.props.onGoBack}>Back to my bill</button>\r\n                <button className={classes.CloseButton}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state.items,\r\n        subtotal: state.subtotal,\r\n        fees: state.fees,\r\n        total: state.total\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGoBack: () => dispatch({ type: actionTypes.GO_BACK })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Receipt);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Start from './Pages/Start/Start';\r\nimport AddItems from './Pages/AddItems/AddItems';\r\nimport Layout from './hoc/Layout/Layout';\r\nimport ClaimItems from './Pages/ClaimItems/ClaimItems';\r\nimport Tax from './Pages/Tax/Tax';\r\nimport AdditionalFees from \"./Pages/AdditionalFees/AdditionalFees\";\r\nimport Results from './Pages/Results/Results';\r\nimport Receipt from './Pages/Receipt/Receipt';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    let currentComponent = <Start/>\r\n    if (this.props.currentPage === 1) {\r\n      currentComponent = <AddItems/>\r\n    }\r\n    else if (this.props.currentPage === 2) {\r\n      currentComponent = <ClaimItems/>\r\n    }\r\n    else if (this.props.currentPage === 3) {\r\n      currentComponent = <Tax/>\r\n    } else if (this.props.currentPage === 4) {\r\n      currentComponent = <AdditionalFees/>\r\n    } else if (this.props.currentPage === 5) {\r\n      currentComponent = <Results/>\r\n    } else if (this.props.currentPage === 6) {\r\n      currentComponent = <Receipt/>\r\n    }\r\n    return (\r\n      <Layout>\r\n        {currentComponent}\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    currentPage: state.currentPage\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n};","import * as actionTypes from \"./actions\"\r\nimport {updateObject} from \"../shared/utility\"\r\n\r\nconst intialState = {\r\n    eventName: \"\",\r\n    amountPeople: \"\",\r\n    personId: 0,\r\n    itemId: 0,\r\n    currentPage: 0,\r\n    subtotal: 0,\r\n    taxedItemSubtotal: 0,\r\n    items: [],\r\n    persons: [],\r\n    fees: [],\r\n    total: 0\r\n}\r\n\r\nconst reducer = (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ON_START:\r\n            let initialPersons = [];\r\n            let amountPeople = parseInt(action.amountPeople);\r\n            //create person objects = to amountPeople & push to array\r\n            for (let i = 0; i < amountPeople; i++) {\r\n                initialPersons.push({\r\n                    personId: i,\r\n                    name: \"Person \" + i,\r\n                    items: [],\r\n                    splitFees: [],\r\n                    total: 0\r\n                });\r\n            }\r\n            //set persons state to created array\r\n            return updateObject(state, {\r\n                currentPage: state.currentPage + 1,\r\n                persons: initialPersons,\r\n                personId: amountPeople,\r\n                eventName: action.eventName,\r\n                amountPeople: amountPeople\r\n            });\r\n        case actionTypes.NEXT_PAGE:\r\n            return updateObject(state, {\r\n                currentPage: state.currentPage + 1\r\n            });\r\n        case actionTypes.ADD_ITEM:\r\n            let itemNum = state.itemId;\r\n            let price = 0;\r\n            if (action.price !== \"\") {\r\n                price = parseFloat(action.price);\r\n            }\r\n            //updatedItems = copy of items + new item\r\n            let updatedItems = state.items.concat({\r\n                itemId: itemNum,\r\n                name: action.name,\r\n                price: price,\r\n                persons: [],\r\n                taxed: false,\r\n                splitPrice: 0,\r\n                splitFees: []\r\n            });\r\n            //update price\r\n            let updatedPrice =\r\n                state.subtotal + price;\r\n            //update state\r\n            return updateObject(state, {\r\n                itemId: itemNum + 1,\r\n                items: updatedItems,\r\n                subtotal: updatedPrice\r\n            });\r\n        case actionTypes.REMOVE_ITEM:\r\n            //update subtotal\r\n            let updatedSubtotal = state.subtotal - state.items[action.id].price;\r\n            //update items excluding removed item & update subtotal object\r\n            return updateObject(state, {\r\n                items: state.items.filter((_, i) => i !== action.id),\r\n                subtotal: updatedSubtotal\r\n            });\r\n        case actionTypes.GO_BACK:\r\n            return updateObject(state, {currentPage: state.currentPage - 1});\r\n        case actionTypes.CHANGE_NAME:\r\n            //update person object\r\n            let updatedPerson = updateObject(state.persons[action.id], {\r\n                name: action.event.target.value\r\n            });\r\n            //update persons array by replacing w/ new person object\r\n            let updatedPersons = [...state.persons]\r\n            updatedPersons[action.id] = updatedPerson;\r\n            //set state persons to updated persons array\r\n            return updateObject(state, {persons: updatedPersons})\r\n        case actionTypes.ADD_PERSON:\r\n            //add to amount of people\r\n            let updatedAmountPeople = state.amountPeople + 1\r\n            //get new person index\r\n            //add person object to persons array\r\n            let AddedToPersons = state.persons.concat({\r\n                personId: state.personId,\r\n                name: \"Person \" + state.personId,\r\n                items: [],\r\n                splitFees: []\r\n            });\r\n            //update states\r\n            return updateObject(state, {\r\n                personId: state.personId + 1,\r\n                amountPeople: updatedAmountPeople,\r\n                persons: AddedToPersons\r\n            });\r\n        case actionTypes.REMOVE_PERSON:\r\n            //subtract from amount of people\r\n            let updatedAmtPeople = state.amountPeople - 1;\r\n            //remove person from each item.persons\r\n            let itemsRemovedPerson = [...state.items]\r\n            itemsRemovedPerson.forEach((item) => {\r\n                item.persons = item.persons.filter(\r\n                    (personId) => personId !== state.persons[action.id].personId\r\n                )\r\n            });\r\n            //update persons excluding removed person\r\n            return updateObject(state, {\r\n                amountPeople: updatedAmtPeople,\r\n                persons: state.persons.filter((_, i) => i !== action.id),\r\n                items: itemsRemovedPerson\r\n            });\r\n        case actionTypes.CLAIM_ITEM:\r\n            let updatePersons = [...state.persons];\r\n            let updateItems = [...state.items];\r\n            //if person hasn't claimed item yet, add to lists\r\n            if (\r\n                !state.persons[action.selectedPerson].items.includes(\r\n                    state.items[action.selectedItem].itemId\r\n                )\r\n            ) {\r\n                //add item to person.items array - persons[1].items\r\n                let personItems = state.persons[action.selectedPerson].items.concat(\r\n                    state.items[action.selectedItem].itemId\r\n                );\r\n                //update person object - persons[1]\r\n                let updatePerson = updateObject(\r\n                    state.persons[action.selectedPerson],\r\n                    {items: personItems}\r\n                );\r\n                //update persons array by replacing w/ new person object - persons\r\n                updatePersons[action.selectedPerson] = updatePerson;\r\n\r\n                //add person to items.persons array - items[1].persons\r\n                let itemClaimers = state.items[action.selectedItem].persons.concat(\r\n                    state.persons[action.selectedPerson].personId\r\n                );\r\n                //update item object - items[1]\r\n                let updateItem = updateObject(state.items[action.selectedItem], {\r\n                    persons: itemClaimers\r\n                });\r\n                //update items array by replacing w/ new item object - items\r\n                updateItems[action.selectedItem] = updateItem;\r\n            } else {\r\n                //remove item from person.items array\r\n                let personItems = state.persons[action.selectedPerson].items.filter(\r\n                    (item) => item !== state.items[action.selectedItem].itemId\r\n                );\r\n\r\n                //update person object\r\n                let updatePerson = updateObject(\r\n                    state.persons[action.selectedPerson],\r\n                    {items: personItems}\r\n                );\r\n                //update persons array by replacing w/ new person object\r\n                updatePersons[action.selectedPerson] = updatePerson;\r\n\r\n                //remove person from items.claimers array\r\n                let itemClaimers = state.items[action.selectedItem].persons.filter(\r\n                    (person) => person !== state.persons[action.selectedPerson].personId\r\n                );\r\n\r\n                //update item object\r\n                let updateItem = updateObject(state.items[action.selectedItem], {\r\n                    persons: itemClaimers\r\n                });\r\n                //update items array by replacing w/ new item object\r\n                updateItems[action.selectedItem] = updateItem;\r\n            }\r\n\r\n            //set state persons to updated persons array & items to updated items array\r\n            return updateObject(state, {\r\n                persons: updatePersons,\r\n                items: updateItems\r\n            });\r\n        case actionTypes.TAX_ITEM:\r\n            // Create copy of the items we currently have in state\r\n            let currentItems = [...state.items];\r\n            let taxedSubtotal = state.taxedItemSubtotal;\r\n            \r\n            //update subtotal for taxed items\r\n            if (!currentItems[action.selectedItem].taxed === true) {\r\n                taxedSubtotal = state.taxedItemSubtotal + currentItems[action.selectedItem].price;\r\n            }\r\n            else {\r\n                taxedSubtotal = state.taxedItemSubtotal - currentItems[action.selectedItem].price;\r\n            }\r\n            // Updated the item with the following id, given the selectedItem (action.selectedItem)\r\n            let updatedTaxItem = updateObject(currentItems[action.selectedItem], {\r\n                taxed: !currentItems[action.selectedItem].taxed\r\n            });\r\n            // updated that in the items list\r\n            currentItems[action.selectedItem] = updatedTaxItem;\r\n            return updateObject(state, {\r\n                items: currentItems,\r\n                taxedItemSubtotal: taxedSubtotal\r\n            });\r\n        case actionTypes.SELECT_ALL_ITEMS:\r\n            let currentItemsSelectAll = [...state.items];\r\n            //set taxed to true for all items\r\n            let itemsToTrue = currentItemsSelectAll.map((item) => {\r\n                //mark item taxed\r\n                return updateObject(item, {taxed: true})\r\n            });\r\n            return updateObject(state, {\r\n                items: itemsToTrue,\r\n                taxedItemSubtotal: state.subtotal\r\n            });\r\n        case actionTypes.ON_SPLIT:\r\n            //calculate fee percentages\r\n            let feePercentages = [];\r\n            action.fees.forEach((fee) => {\r\n                // % = fee amount / subtotal\r\n                let currentFeePercentage =\r\n                    parseFloat(fee.amount) / state.subtotal;\r\n                //if fee is tax, use subtotal of taxed items instead\r\n                if (fee.name === \"Tax\") {\r\n                    currentFeePercentage = parseFloat(fee.amount) / state.taxedItemSubtotal;\r\n                }\r\n                //push object to array\r\n                feePercentages.push({\r\n                    name: fee.name,\r\n                    percentage: currentFeePercentage\r\n                });\r\n            })\r\n\r\n            //////// CALCULATING SPLIT PRICE FOR EVERY ITEM ////////\r\n            let itemsToSplit = [...state.items];\r\n            // Calculates the split price per item depending on how many claimed it\r\n            let itemsWithSplit = itemsToSplit.map(item => {\r\n                //calculate split price = item price / # people who claimed item\r\n                let itemSplitPrice =\r\n                    parseFloat(item.price) / item.persons.length;\r\n                //store item fees\r\n                let itemFeesMap = new Map();\r\n                //calculate fee amount for each fee\r\n                feePercentages.forEach((fee) => {\r\n                    //calculate fee amount = item split price * fee%\r\n                    let feeAmount =\r\n                        fee.percentage * itemSplitPrice;\r\n                    //if calculating tax & item is not taxed, then set amount to 0\r\n                    if (fee.name === \"Tax\" && item.taxed === false) {\r\n                        feeAmount = 0;\r\n                    }\r\n                    //update item fee\r\n                    itemFeesMap.set(fee.name, feeAmount);\r\n                });\r\n                //update item object\r\n                return updateObject(item, {\r\n                    splitPrice: itemSplitPrice,\r\n                    splitFees: itemFeesMap\r\n                });\r\n            })\r\n\r\n            //////// CALCULATING SPLIT FEES (TAX TIP) FOR EACH PERSON ////////\r\n            let personsWithFees = state.persons.map((person) => {\r\n                let personTotal = 0;\r\n                //split fees for each person\r\n                let splitFeesToUpdate = new Map();\r\n                //for each item that the person claimed\r\n                person.items.forEach((item) => {\r\n                    //find item object\r\n                    const itemInfo = itemsWithSplit.find(\r\n                        (tempItem) => item === tempItem.itemId\r\n                    );\r\n                    //add item price to person total amount\r\n                    personTotal = personTotal + itemInfo.splitPrice;\r\n                    // For each split fee in item\r\n                    action.fees.forEach( fee => {\r\n                        let initialFeeAmount = 0;\r\n                        let newFeeAmount = itemInfo.splitFees.get(fee.name);\r\n                        personTotal = personTotal + newFeeAmount;\r\n                        if (splitFeesToUpdate.has(fee.name)) {\r\n                            initialFeeAmount = splitFeesToUpdate.get(fee.name);\r\n                        }\r\n                        //update split fee total\r\n                        splitFeesToUpdate.set(\r\n                            fee.name,\r\n                            initialFeeAmount + newFeeAmount\r\n                        );\r\n                    });\r\n                });\r\n\r\n                return updateObject(person, {\r\n                    splitFees: splitFeesToUpdate,\r\n                    total: personTotal\r\n                });\r\n;\r\n            })\r\n            return updateObject(state, {\r\n                currentPage: state.currentPage + 1,\r\n                items: itemsWithSplit,\r\n                persons: personsWithFees,\r\n                fees: action.fees,\r\n                total: action.grandTotal\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore} from 'redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport reducer from './store/reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app,document.getElementById('root'));\r\n"],"sourceRoot":""}